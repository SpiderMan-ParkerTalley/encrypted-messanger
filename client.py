from cryptography.fernet import Fernet
import socket

print("STARTING CLIENT...")

# Create and store a socket that we can use to send and receive internet traffic.
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(("localhost", 12345))
print("CONNECTED TO SERVER...")

# Wait to receive the key that is generated by the server and will be used for 
# the cipher.
print("WAITING FOR KEY...")
key = client.recv(1024)
print("KEY RECEIVED: " + str(key))

# Pass the key into the cipher and set the cipher to a variable that we can call.
cipher = Fernet(key)

# Continue to send and receive messages until changed to True.
done = False

while not done:
    
    # Ask the user to input a message that will be sent to the server.
    send = input("Message: ")
    
    # Check if the message is to 'quit'.
    # If the message is to quit, send the message to the server and set done 
    # equal to True.
    if send == 'quit':
        client.send(cipher.encrypt(bytes(send, 'utf-8')))
        done = True
    
    # If the message is not 'quit'.
    else:
        
        # Encrypt and send the message to the server.
        client.send(cipher.encrypt(bytes(send, 'utf-8')))
        received = cipher.decrypt(client.recv(1024)).decode('utf-8')
        
        # If 'quit' is received from the server, let the client know and end 
        # the program.
        if received == 'quit':
            print("QUIT RESPONSE RECEIVED FROM SERVER, CLOSING MESSENGER")
            done = True
        # If the message was NOT 'quit' display the message and continue.
        else:
            print(received)
            
# Close the socket before the program closes.    
client.close()